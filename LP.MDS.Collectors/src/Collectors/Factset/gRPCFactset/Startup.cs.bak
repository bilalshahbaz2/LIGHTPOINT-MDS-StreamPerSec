using AutoMapper;
using Base.Marker;
using FactsetProcessor;
using gRPCBaseCollector;
using gRPCBaseCollector.Mappers;
using gRPCBaseCollector.Mappers.MappingProfiles;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using ProcessorProtocol;
using ServiceProtocol;
using ServiceProtocol.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace gRPCFactset
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddTransient<ReferenceDataProcessor, ReferenceDataProcessImpl>();
            services.AddTransient<IReferenceDataService, ReferenceDataService>();
<<<<<<< Updated upstream
            services.AddTransient<IMarketDataService, MarketDataService>();
            services.AddTransient<MarketDataProcessor, SubscriptionDataProcessImpl>();
=======
>>>>>>> Stashed changes

            BaseMarker.Init<ServiceProtocolMarker>(services);
            /**
             * init processor Marker.
             */
            BaseMarker.Init<gRPCBaseCollectorMaker>(services);

            //gRPCBaseCollector.Register(services);
            services.AddGrpc();

            services.AddControllers();

            //AutoMapper
            services.AddAutoMapper(typeof(Startup));
            var mapperConfig = new MapperConfiguration(mc =>
            {
                mc.AddProfile(new Profiles());
            });
            IMapper mapper = mapperConfig.CreateMapper();
            services.AddSingleton(mapper);


        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
                endpoints.MapGrpcService<MdsGrpcServiceImpl>();

            });
        }
    }
}
